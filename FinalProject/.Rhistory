#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#Re-running the regression
p3 <-plm(log(math12) ~ catholic ,data=hwk3[match==1], index=c("id"),model="pooling")
p4 <-plm(log(math12) ~ catholic + math8 + read8 + female + black + hisp
+ Nohw8 + api + nativam + hsgrad + disrupt8 + riskdrop8,data=hwk3[match==1], index=c("id"),model="pooling")
stargazer(
p,p2,p3,p4,
se=list(sqrt(diag(vcovHC(p, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p2, method="arellano", type="HC1"))),
sqrt(diag(vcovHC(p3, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p4, method="arellano", type="HC1")))),
title="Comparison between regressions with and without PSM",
type="text",
model.numbers = F,
column.labels=c("No PSM","No PSM","PSM","PSM"))
#PROPENSITY SCORE MATCHING
hwk3Summary <- hwk3[,list(catholic = catholic[1],math8 = mean(math8),math12 = mean(math12)), by=list(id)]
#hwk3Summary
#set a fixed seed
set.seed(1000)
#match treated/control on likelihood of treatment (premium)
library(MatchIt)
Match <- matchit(catholic ~ math8 + read8 + female + black + api + nativam + hsgrad + disrupt8,
data = hwk3,
method = 'nearest', caliper=0.01)
summary(Match)#summarize quality of matched sample
#identify matched sample
hwk3Summary.match <- data.table(match.data(Match))
Matched.ids <- hwk3$id %in% hwk3Summary.match$id
hwk3[, match := Matched.ids]
Matched.ids.sum <- hwk3Summary$id %in% hwk3Summary.match$id
hwk3Summary[, match := Matched.ids.sum]
hwk3
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#Re-running the regression
p3 <-plm(log(math12) ~ catholic ,data=hwk3[match==1], index=c("id"),model="pooling")
p4 <-plm(log(math12) ~ catholic + math8 + read8 + female + black + hisp
+ Nohw8 + api + nativam + hsgrad + disrupt8 + riskdrop8,data=hwk3[match==1], index=c("id"),model="pooling")
stargazer(
p,p2,p3,p4,
se=list(sqrt(diag(vcovHC(p, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p2, method="arellano", type="HC1"))),
sqrt(diag(vcovHC(p3, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p4, method="arellano", type="HC1")))),
title="Comparison between regressions with and without PSM",
type="text",
model.numbers = F,
column.labels=c("No PSM","No PSM","PSM","PSM"))
#PROPENSITY SCORE MATCHING
hwk3Summary <- hwk3[,list(catholic = catholic[1],math8 = mean(math8),math12 = mean(math12)), by=list(id)]
#hwk3Summary
#set a fixed seed
set.seed(1000)
#match treated/control on likelihood of treatment (premium)
library(MatchIt)
Match <- matchit(catholic ~ math8 + read8 + female + black + api + nativam + hsgrad + disrupt8 + read12,
data = hwk3,
method = 'nearest', caliper=0.01)
summary(Match)#summarize quality of matched sample
#identify matched sample
hwk3Summary.match <- data.table(match.data(Match))
Matched.ids <- hwk3$id %in% hwk3Summary.match$id
hwk3[, match := Matched.ids]
Matched.ids.sum <- hwk3Summary$id %in% hwk3Summary.match$id
hwk3Summary[, match := Matched.ids.sum]
hwk3
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#PROPENSITY SCORE MATCHING
hwk3Summary <- hwk3[,list(catholic = catholic[1],math8 = mean(math8),math12 = mean(math12)), by=list(id)]
#hwk3Summary
#set a fixed seed
set.seed(1000)
#match treated/control on likelihood of treatment (premium)
library(MatchIt)
Match <- matchit(catholic ~ math8 + read8,
data = hwk3,
method = 'nearest', caliper=0.01)
summary(Match)#summarize quality of matched sample
#identify matched sample
hwk3Summary.match <- data.table(match.data(Match))
Matched.ids <- hwk3$id %in% hwk3Summary.match$id
hwk3[, match := Matched.ids]
Matched.ids.sum <- hwk3Summary$id %in% hwk3Summary.match$id
hwk3Summary[, match := Matched.ids.sum]
hwk3
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#PROPENSITY SCORE MATCHING
hwk3Summary <- hwk3[,list(catholic = catholic[1],math8 = mean(math8),math12 = mean(math12)), by=list(id)]
#hwk3Summary
#set a fixed seed
set.seed(1000)
#match treated/control on likelihood of treatment (premium)
library(MatchIt)
Match <- matchit(catholic ~ math8 + read8,
data = hwk3,
method = 'nearest', caliper=0.01)
summary(Match)#summarize quality of matched sample
#identify matched sample
hwk3Summary.match <- data.table(match.data(Match))
Matched.ids <- hwk3$id %in% hwk3Summary.match$id
hwk3[, match := Matched.ids]
Matched.ids.sum <- hwk3Summary$id %in% hwk3Summary.match$id
hwk3Summary[, match := Matched.ids.sum]
hwk3
#identify matched sample
hwk3Summary.match <- data.table(match.data(Match))
Matched.ids <- hwk3$id %in% hwk3Summary.match$id
hwk3[, match := Matched.ids]
Matched.ids.sum <- hwk3Summary$id %in% hwk3Summary.match$id
hwk3Summary[, match := Matched.ids.sum]
hwk3
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#Re-running the regression
p3 <-plm(log(math12) ~ catholic ,data=hwk3[match==1], index=c("id"),model="pooling")
p4 <-plm(log(math12) ~ catholic + math8 + read8 + female + black + hisp
+ Nohw8 + api + nativam + hsgrad + disrupt8 + riskdrop8,data=hwk3[match==1], index=c("id"),model="pooling")
stargazer(
p,p2,p3,p4,
se=list(sqrt(diag(vcovHC(p, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p2, method="arellano", type="HC1"))),
sqrt(diag(vcovHC(p3, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p4, method="arellano", type="HC1")))),
title="Comparison between regressions with and without PSM",
type="text",
model.numbers = F,
column.labels=c("No PSM","No PSM","PSM","PSM"))
#Test on full dataset before matching
test1 <- t.test(hwk3$math8[hwk3$catholic==0 ],hwk3$math8[hwk3$catholic==1 ], alternative = "two.sided")
#Test on matched dataset
test2 <- t.test(hwk3$math8[hwk3$catholic==0 & hwk3$match==1 ], hwk3$math8[hwk3$catholic==1 & hwk3$match==1 ], alternative = "two.sided")
test1
test2
#Re-running the regression
p3 <-plm(log(math12) ~ catholic ,data=hwk3[match==1], index=c("id"),model="pooling")
p4 <-plm(log(math12) ~ catholic + math8 + read8 + female + black + hisp
+ Nohw8 + api + nativam + hsgrad + disrupt8 + riskdrop8,data=hwk3[match==1], index=c("id"),model="pooling")
stargazer(
p,p2,p3,p4,
se=list(sqrt(diag(vcovHC(p, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p2, method="arellano", type="HC1"))),
sqrt(diag(vcovHC(p3, method="arellano", type="HC1"))), sqrt(diag(vcovHC(p4, method="arellano", type="HC1")))),
title="Comparison between regressions with and without PSM",
type="text",
model.numbers = F,
column.labels=c("No PSM","No PSM","PSM","PSM"))
ParticipantData12Dec2022 <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/ParticipantData12Dec2022.csv")
View(ParticipantData12Dec2022)
knitr::opts_chunk$set(echo = TRUE)
my_data <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/ParticipantData12Dec2022.csv")
my_data <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/ParticipantData12Dec2022.csv")
my_data.colnames()
colnames(my_data)
mydata$correct_pre_quiz
my_data$correct_pre_quiz
# ITT
itt <- lm(correct_post_quiz ~ recording_elegible, data = mydata)
# ITT
itt <- lm(correct_post_quiz ~ recording_elegible, data = my_data)
#ITT heterogeneous effects
itth <- lm(correct_post_quiz ~ recording_elegible + I(correct_pre_quiz> 1) + recording_elegible:I(correct_pre_quiz> 1), data = my_data)
# LATE
late <- ivreg(correct_post_quiz ~ cam_allowed |recording_elegible , data = my_data)
# LATE
library("CRAN")
install.packages("CRAN")
# LATE
library("CRAN")
# LATE
library(CRAN)
install.packages(CRAN)
install.packages("CRAN")
install.packages("ivreg", dependencies = TRUE)
# LATE
library(ivreg)
late <- ivreg(correct_post_quiz ~ cam_allowed |recording_elegible , data = my_data)
#LATE heterogenous effects
lateh <- ivreg(correct_post_quiz ~ cam_allowed +
I(correct_pre_quiz> 1) +
cam_allowed:I(correct_pre_quiz> 1)
| recording_elegible +
I(correct_pre_quiz> 1) +
recording_elegible:I(correct_pre_quiz> 1) ,
data = my_data)
#ASK TA if we should be including any other variables that control for related to camera
# LATE
library(ivreg)
late <- ivreg(correct_post_quiz ~ cam_allowed |recording_elegible , data = my_data)
#LATE heterogenous effects
lateh <- ivreg(correct_post_quiz ~ cam_allowed +
I(correct_pre_quiz> 1) +
cam_allowed:I(correct_pre_quiz> 1)
| recording_elegible +
I(correct_pre_quiz> 1) +
recording_elegible:I(correct_pre_quiz> 1) ,
data = my_data)
late
#ASK TA if we should be including any other variables that control for related to camera
# LATE
stargazer(itt, itth, late, lateh,
se=list(
sqrt(diag(vcovHC(ittt,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(ittl,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(itts,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(ittth,method="arellano",type="HC1")))),
dep.var.labels = c('ITT', 'ITT Heterogenous', 'LATE','LATE Heterogenous'),
type = "text",
model.numbers = F)
# LATE
library(stargazer)
stargazer(itt, itth, late, lateh,
se=list(
sqrt(diag(vcovHC(ittt,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(ittl,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(itts,method="arellano",type="HC1"))),
sqrt(diag(vcovHC(ittth,method="arellano",type="HC1")))),
dep.var.labels = c('ITT', 'ITT Heterogenous', 'LATE','LATE Heterogenous'),
type = "text",
model.numbers = F)
# LATE
library(stargazer)
stargazer(itt, itth, late, lateh,
title= "Effect of Camera on Post Quiz Scores",
type="text",
column.labels = c('ITT', 'ITT Heterogenous', 'LATE','LATE Heterogenous'),
model.numbers = F)
#ASK TA if we should be including any other variables that control for related to camera
knitr::opts_chunk$set(echo = TRUE)
my_data <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/ParticipantData12Dec2022.csv") #participant data from survey
participant_video <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/ParticipantVideoData12Dec2022.csv")
video_data <- read.csv("~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/VideosData_ABTestingProject.csv")
colnames(my_data)
my_data$correct_pre_quiz
# ITT
itt <- lm(correct_post_quiz ~ recording_elegible, data = my_data)
#SSK TA what this piece of code means
#create dataset with average total TV usage before experiment
#MyData.avg.total.tv <-
#MyData[, avg_total_tv_hr :=
#mean(view_time_total_hr[after == FALSE]), by=list(id)]
#ITT heterogeneous effects
itth <- lm(correct_post_quiz ~ recording_elegible + I(correct_pre_quiz> 1) + recording_elegible:I(correct_pre_quiz> 1), data = my_data)
# ITT
itt <- lm(correct_post_quiz ~ recording_elegible, data = my_data)
#SSK TA what this piece of code means
#create dataset with average total TV usage before experiment
#MyData.avg.total.tv <-
#MyData[, avg_total_tv_hr :=
#mean(view_time_total_hr[after == FALSE]), by=list(id)]
#ITT heterogeneous effects
itth <- lm(correct_post_quiz ~ recording_elegible + I(correct_pre_quiz> 1) + recording_elegible:I(correct_pre_quiz> 1), data = my_data)
# LATE
library(ivreg)
late <- ivreg(correct_post_quiz ~ cam_allowed |recording_elegible , data = my_data)
#LATE heterogenous effects
lateh <- ivreg(correct_post_quiz ~ cam_allowed +
I(correct_pre_quiz> 1) +
cam_allowed:I(correct_pre_quiz> 1)
| recording_elegible +
I(correct_pre_quiz> 1) +
recording_elegible:I(correct_pre_quiz> 1) ,
data = my_data)
#ASK TA if we should be including any other variables that control for related to camera
# LATE
library(stargazer)
stargazer(itt, itth, late, lateh,
title= "Effect of Camera on Post Quiz Scores",
type="text",
column.labels = c('ITT', 'ITT Heterogenous', 'LATE','LATE Heterogenous'),
model.numbers = F)
#ASK TA if we should be including any other variables that control for related to camera
colnames(participant_video)
colnames(video_data)
merged_df <- merge(participant_video,video_data, by = c("video_id"))
merged_df
summary(merged_df)
library("writexl")
write_xlsx(merged_df,"~/Carnegie_Mellon/Courses/Fall 2022/95-819 AB Testing, Design and Analysis/Project/merged.xlsx")
install.packages("ggplot2")
library(ggplot2)
#Ranking of Maths Score by Countries
ggplot(data = merged_df,aes(x=reorder(video_id,smile.x),y=smile.x)) +
geom_bar(stat ='identity',aes(fill=smile.x))+
coord_flip() +
theme_grey() +
scale_fill_gradient(name="Smile Score")+
labs(title = 'XXX',
y='smile',x='participant_id')+
geom_hline(yintercept = mean(df$Maths),size = 1, color = 'blue')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
#select relevant columns
new_df <- merged_df[, c("video_id", participant_id",smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x", "smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")]
#select relevant columns
new_df <- merged_df[, c("video_id", "participant_id", "smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x", "smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")]
#participant_emotions <- c("smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x")
#presenter_emotions <- c("smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")
new_df
#correlation
install.packages("corrplot")
library(corrplot)
corrplot(new_df, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#correlation
install.packages("corrplot")
library(corrplot)
corrplot(new_df)
install.packages("corrplot")
#correlation
#install.packages("corrplot")
library(corrplot)
corrplot(new_df)
#select relevant columns
new_df <- merged_df[, c("smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x", "smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")]
#participant_emotions <- c("smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x")
#presenter_emotions <- c("smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")
new_df
#correlation
#install.packages("corrplot")
library(corrplot)
corrplot(new_df)
#select relevant columns
new_df <- merged_df[, c("smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x", "smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")]
new_df2<- na.omit(new_df)
#participant_emotions <- c("smile.x", "emot_anger.x", "emot_contempt.x","emot_disgust.x", "emot_fear.x", "emot_happiness.x", "emot_neutral.x", "emot_sadness.x", "emot_surprise.x")
#presenter_emotions <- c("smile.y", "emot_anger.y", "emot_contempt.y", "emot_disgust.y", "emot_fear.y", "emot_happiness.y", "emot_neutral.y", "emot_sadness.y", "emot_surprise.y")
new_df2
#correlation
#install.packages("corrplot")
library(corrplot)
corrplot(new_df2, method = 'number')
shiny::runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/hw1-cigarcia/HWK1')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='cigarcia',
token='17D8E2892AD3FBE3E3C53E7C2A5AF988',
secret='<SECRET>')
rsconnect::setAccountInfo(name='cigarcia',
token='17D8E2892AD3FBE3E3C53E7C2A5AF988',
secret='1YcqBhNIBHBF/g0gTfDi+w45hPr8K1Uge9ZkoIBI')
shiny::runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/hw1-cigarcia/HWK1')
shiny::runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp()
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp()
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
runApp('Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject')
# Libraries
library(shiny)
library(shinythemes)
library(leaflet)
library(leaflet.extras)
library(sf)
library(shinyjs)
library(dplyr)
library(shinydashboard)
library(reshape2)
library(plotly)
library(ggplot2)
library(hms)
library(DT)
library(stringr)
library(tools)
library(readr)
library(fontawesome)
library(geojsonR)
library(purrr)
#library(tidyverse)
#Importing Housing Data
housing <- read.csv("miami_housing_data.csv")
print(colnames(housing))
#Changing Column names
colnames(housing) <- c("lat","long","parcel.no","sale.prc","lnd.sqft", "tot.lvg.area", "spec.feat.val",
"rail.dist", "ocean.dist", "water.dist", "cntr.dist", "subcntr.di", "hw.dist", "age",
"avno60plus", "month.sold", "struct.quality")
#class(housing$sale.prc) <-"Numeric"
housing$sale.prc <- as.numeric(gsub(",","",housing$sale.prc))
housing$price.range <- 0
housing$price.range[housing$sale.prc < 100000] <- "Less than $100,000"
housing$price.range[housing$sale.prc >= 100000 & housing$sale.prc <= 250000] <- "$100,000 - $250,000"
housing$price.range[housing$sale.prc > 250000 & housing$sale.prc <= 5000000] <- "$250,001 - $500,000"
housing$price.range[housing$sale.prc > 500000 & housing$sale.prc <= 1000000] <- "$500,001 - $1,000,000"
housing$price.range[housing$sale.prc > 1000000] <- "More than $1,000,000"
housing$month.sold.name <- 0
housing$month.sold.name[housing$month.sold == 1] <- "January"
housing$month.sold.name[housing$month.sold == 2] <- "February"
housing$month.sold.name[housing$month.sold == 3] <- "March"
housing$month.sold.name[housing$month.sold == 4] <- "April"
housing$month.sold.name[housing$month.sold == 5] <- "May"
housing$month.sold.name[housing$month.sold == 6] <- "June"
housing$month.sold.name[housing$month.sold == 7] <- "July"
housing$month.sold.name[housing$month.sold == 8] <- "August"
housing$month.sold.name[housing$month.sold == 9] <- "September"
housing$month.sold.name[housing$month.sold == 10] <- "October"
housing$month.sold.name[housing$month.sold == 11] <- "November"
housing$month.sold.name[housing$month.sold == 12] <- "December"
housing$month.sold.name <- factor(housing$month.sold.name,
levels= rev(c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")))
housing$index <- seq_along(housing$sale.prc)
#IMPORTING SPATIAL DATA
#Loading  Neighborhoods (Polygons)
neigh.load <- st_read("https://services1.arcgis.com/CvuPhqcTQpZPT9qY/arcgis/rest/services/Miami_Neighborhoods_Shapefile/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#SPATIAL JOIN BETWEEN MUNICIPALITIES AND HOUSING
#Combining Housing Data set with municipalities
housing_sf <- st_as_sf(housing, coords = c("long", "lat"), crs = 4326)
#Joining data sets
joined_sf <- st_join(housing_sf, neigh.load, join = st_within) %>%
filter(!is.na(LABEL))
housing <- read.csv("miami_housing_data.csv")
setwd("~/Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/cigarcia-FinalProject/FinalProject")
runApp()
# Libraries
library(shiny)
library(shinythemes)
library(leaflet)
library(leaflet.extras)
library(sf)
library(shinyjs)
library(dplyr)
library(shinydashboard)
library(reshape2)
library(plotly)
library(ggplot2)
library(hms)
library(DT)
library(stringr)
library(tools)
library(readr)
library(fontawesome)
library(geojsonR)
library(purrr)
#library(tidyverse)
#Importing Housing Data
housing <- read.csv("miami_housing_data.csv")
print(colnames(housing))
#Changing Column names
colnames(housing) <- c("lat","long","parcel.no","sale.prc","lnd.sqft", "tot.lvg.area", "spec.feat.val",
"rail.dist", "ocean.dist", "water.dist", "cntr.dist", "subcntr.di", "hw.dist", "age",
"avno60plus", "month.sold", "struct.quality")
#class(housing$sale.prc) <-"Numeric"
housing$sale.prc <- as.numeric(gsub(",","",housing$sale.prc))
housing$price.range <- 0
housing$price.range[housing$sale.prc < 100000] <- "Less than $100,000"
housing$price.range[housing$sale.prc >= 100000 & housing$sale.prc <= 250000] <- "$100,000 - $250,000"
housing$price.range[housing$sale.prc > 250000 & housing$sale.prc <= 5000000] <- "$250,001 - $500,000"
housing$price.range[housing$sale.prc > 500000 & housing$sale.prc <= 1000000] <- "$500,001 - $1,000,000"
housing$price.range[housing$sale.prc > 1000000] <- "More than $1,000,000"
housing$month.sold.name <- 0
housing$month.sold.name[housing$month.sold == 1] <- "January"
housing$month.sold.name[housing$month.sold == 2] <- "February"
housing$month.sold.name[housing$month.sold == 3] <- "March"
housing$month.sold.name[housing$month.sold == 4] <- "April"
housing$month.sold.name[housing$month.sold == 5] <- "May"
housing$month.sold.name[housing$month.sold == 6] <- "June"
housing$month.sold.name[housing$month.sold == 7] <- "July"
housing$month.sold.name[housing$month.sold == 8] <- "August"
housing$month.sold.name[housing$month.sold == 9] <- "September"
housing$month.sold.name[housing$month.sold == 10] <- "October"
housing$month.sold.name[housing$month.sold == 11] <- "November"
housing$month.sold.name[housing$month.sold == 12] <- "December"
housing$month.sold.name <- factor(housing$month.sold.name,
levels= rev(c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")))
housing$index <- seq_along(housing$sale.prc)
#IMPORTING SPATIAL DATA
#Loading  Neighborhoods (Polygons)
neigh.load <- st_read("https://services1.arcgis.com/CvuPhqcTQpZPT9qY/arcgis/rest/services/Miami_Neighborhoods_Shapefile/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
#SPATIAL JOIN BETWEEN MUNICIPALITIES AND HOUSING
#Combining Housing Data set with municipalities
housing_sf <- st_as_sf(housing, coords = c("long", "lat"), crs = 4326)
#Joining data sets
joined_sf <- st_join(housing_sf, neigh.load, join = st_within) %>%
filter(!is.na(LABEL))
colnames(housing)
housing_sf
joined_sf
runApp()
runApp()
