housing$month.sold.name[housing$month.sold == 9] <- "September"
housing$month.sold.name[housing$month.sold == 10] <- "October"
housing$month.sold.name[housing$month.sold == 11] <- "November"
housing$month.sold.name[housing$month.sold == 12] <- "December"
housing$month.sold.name <- factor(housing$month.sold.name,
levels= rev(c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")))
housing_sf <- st_as_sf(housing, coords = c("long", "lat"), crs = 4326)
housing_sf
joined <- st_join(housing_sf, municipality.load, join = st_intersects)
municipality.load
municipality <- st_as_sf(municipality.load)
municipality
joined <- st_join(housing_sf, municipality, join = st_intersects)
municipality <- st_as_sf(municipality.load,  crs = 4326)
municipality
joined <- st_join(housing_sf, municipality, join = st_intersects)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Carnegie_Mellon/Courses/Project/Final.R')
trolley.load <- st_read("./Miami_Trolley_Routes/Miami_Trolley_Routes.shp")
trolley.load
trolley.load$geometry
trolley.load$coordinates <- gsub("\\\\n", "\n", trolley.load$geometry)
trolley.load$coordinates
runApp()
trolley.load$coordinates[1]
trolley.load$coordinates(0)
trolley.load$coordinates[0]
trolley.load$coordinates[1,1]
trolley.load
trolley.load
colnames(trolley.data)
colnames(trolley.load)
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
runApp()
runApp()
runApp()
runApp()
runApp()
trolley.load
runApp()
trolley.load
trolley.load <- st_read("./Miami_Trolley_Routes.geojson")
trolley.load
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
trolley.load <- FROM_GeoJson("./Miami_Trolley_Routes.geojson")
library(geojsonR)
install.package("geojsonR")
install.packages("geojsonR")
library(geojsonR)
trolley.load <- FROM_GeoJson("./Miami_Trolley_Routes.geojson")
trolley.load <- FROM_GeoJson("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
trolley.load <- st_read("./Miami_Trolley_Routes.geojson")
trolley.cent <- trolley.load %>%
st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
boros.load <- st_read("http://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=GeoJSON")
colnames(boros.load)
boros.load$geometry
runApp()
homeIcon <- awesomeIconList(
MS4 = makeAwesomeIcon(icon = "road", library = "fa", markerColor = "gray"),
Combined = makeAwesomeIcon(icon = "cloud", library = "fa", markerColor = "blue"),
`Non-combined` = makeAwesomeIcon(icon = "tint", library = "fa", markerColor = "green"),
`On-site management` = makeAwesomeIcon(icon = "building-o", library = "fa", markerColor = "cadetblue")
)
homeIcon
runApp('~/Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/Class-5/apps/green_inf_proxy_04.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(housing.subset())
colnames(housing.subset)
runApp()
runApp()
runApp('~/Carnegie_Mellon/Courses/Spring 2023/94-880 R Shiny for Operations Management/Class-5/apps/green_inf_proxy_04.R')
runApp('~/Carnegie_Mellon/Courses/Project/Final.R')
runApp()
runApp('~/Carnegie_Mellon/Courses/Project/Final.R')
runApp()
runApp('~/Carnegie_Mellon/Courses/Project/Final.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
trolley
runApp()
trolley
library(sf)
library(purrr)
library(dplyr)
# Read in the GeoJSON file as an sf object
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = map(geometry, ~ st_coordinates(.)[, 1]),
latitude = map(geometry, ~ st_coordinates(.)[, 2]))
trolley.load
trolley.load$latitude
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinythemes)
library(leaflet)
library(leaflet.extras)
library(sf)
library(shinyjs)
library(dplyr)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(ggplot2)
library(hms)
library(DT)
library(stringr)
library(tools)
library(readr)
library(fontawesome)
library(geojsonR)
#library(tidyverse)
#Importing Housing Data
housing <- read.csv("miami_housing_data.csv")
print(colnames(housing))
#Changing Column names
colnames(housing) <- c("lat","long","parcel.no","sale.prc","lnd.sqft", "tot.lvg.area", "spec.feat.val",
"rail.dist", "ocean.dist", "water.dist", "cntr.dist", "subcntr.di", "hw.dist", "age",
"avno60plus", "month.sold", "struct.quality")
#class(housing$sale.prc) <-"Numeric"
housing$sale.prc <- as.numeric(gsub(",","",housing$sale.prc))
housing$price.range <- 0
housing$price.range[housing$sale.prc < 100000] <- "Less than $100,000"
housing$price.range[housing$sale.prc >= 100000 & housing$sale.prc <= 250000] <- "$100,000 - $250,000"
housing$price.range[housing$sale.prc > 250000 & housing$sale.prc <= 5000000] <- "$250,001 - $500,000"
housing$price.range[housing$sale.prc > 500000 & housing$sale.prc <= 1000000] <- "$500,001 - $1,000,000"
housing$price.range[housing$sale.prc > 1000000] <- "More than $1,000,000"
housing$month.sold.name <- 0
housing$month.sold.name[housing$month.sold == 1] <- "January"
housing$month.sold.name[housing$month.sold == 2] <- "February"
housing$month.sold.name[housing$month.sold == 3] <- "March"
housing$month.sold.name[housing$month.sold == 4] <- "April"
housing$month.sold.name[housing$month.sold == 5] <- "May"
housing$month.sold.name[housing$month.sold == 6] <- "June"
housing$month.sold.name[housing$month.sold == 7] <- "July"
housing$month.sold.name[housing$month.sold == 8] <- "August"
housing$month.sold.name[housing$month.sold == 9] <- "September"
housing$month.sold.name[housing$month.sold == 10] <- "October"
housing$month.sold.name[housing$month.sold == 11] <- "November"
housing$month.sold.name[housing$month.sold == 12] <- "December"
housing$month.sold.name <- factor(housing$month.sold.name,
levels= rev(c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")))
housing$index <- seq_along(housing$sale.prc)
#Importing Spacial Data
#Loading Municipalities Shapefile
municipality.load <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
#Combining Housing Data set with municipalities
housing_sf <- st_as_sf(housing, coords = c("long", "lat"), crs = 4326)
joined_sf <- st_join(housing_sf, municipality.load , join = st_within)
joined_df <- as.data.frame(joined_sf)
municipality.load <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")  %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
runApp()
#Loading Municipalities Shapefile
municipality.load <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality.cent <- municipality.load %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
#Loading Municipalities Shapefile
municipality.load <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality.cent <- municipality.load %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
municipality.load <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality.cent <- municipality.load %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
rlang::last_error()
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = map(geometry, ~ st_coordinates(.)[, 1]),
latitude = map(geometry, ~ st_coordinates(.)[, 2]))
trolley.load
runApp()
runApp()
runApp()
greenInf.load
greenInf.load <- st_read("http://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
greenInf.load <- st_read("http://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON")
greenInf.load
greenInf.load
greenInf.load <- st_read("http://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
greenInf.load
boros.load <- st_read("http://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=GeoJSON")
boros.load
boros.cent <- boros.load %>%
st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
boros.cent
boros.load <- boros.load %>%
left_join(boros.cent)
boros.load
library(shiny)
library(leaflet)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("./Miami_Trolley_Routes.geojson")
# Create Leaflet map and add GeoJSON layer
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(leaflet)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("./Miami_Trolley_Routes.geojson")
# Define color palette
pal <- colorFactor(palette = "Blues", domain = c("Feature 1", "Feature 2", "Feature 3"))
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(feature_name_column))
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("path/to/geojson/file.geojson")
# Define color palette
pal <- colorFactor(palette = "Blues", domain = NAME)
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(feature_name_column))
})
}
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("path/to/geojson/file.geojson")
# Define color palette
pal <- colorFactor(palette = "Blues", domain = geojson$NAME)
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(feature_name_column))
})
}
shinyApp(ui, server)
trolley.load <- st_read("./Miami_Trolley_Routes.geojson")
trolley.load
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("path/to/geojson/file.geojson")
# Define color palette
pal <- colorFactor(palette = "Blues", domain = geojson$Name)
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(feature_name_column))
})
}
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("path/to/geojson/file.geojson")
# Define color palette
pal <- colorFactor(palette = "Reds", domain = c(" Flagami - inbound", " Wynwood - inbound"))
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(Name))
})
}
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
output$map <- renderLeaflet({
# Load GeoJSON file
geojson <- readLines("path/to/geojson/file.geojson")
# Define color palette
pal <- colorFactor(palette = "Reds")
# Create Leaflet map and add GeoJSON layer with colors
leaflet() %>%
addTiles() %>%
addGeoJSON(geojson, color = ~pal(Name))
})
}
shinyApp(ui, server)
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = sf::st_coordinates(.)[[,1]],
latitude = sf::st_coordinates(.)[[,2]])
trolley.load <- st_read("./Miami_Trolley_Routes.geojson") %>%
mutate(longitude = map(geometry, ~ st_coordinates(.)[, 1]),
latitude = map(geometry, ~ st_coordinates(.)[, 2]))
trolley.load
municipality <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality
municipality.cent <- municipality.load %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
municipality.cent <- municipality.load %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
rlang::last_error()
municipality
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[[,1]],
latitude = sf::st_coordinates(.)[[,2]])
municipality$geometry
municipality$geometry[1]
municipality <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[[,1]],
latitude = sf::st_coordinates(.)[[,2]]) %>%
st_set_geometry(NULL)
# Join centroid columns
municipality <- municipality %>%
left_join(municipality.cent)
municipality <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
# Join centroid columns
municipality <- municipality %>%
left_join(municipality.cent)
geom_df <- st_as_sf(municipality$geometry) %>%
st_cast("POLYGON") %>%
st_coordinates() %>%
as.data.frame() %>%
setNames(c("long", "lat"))
geom_df
geom_df$id <- rep(1:nrow(municipality), each = nrow(municipality[[1]]))
geom_df$id <- rep(1:nrow(municipality), each = nrow(municipality[[1]]))
runApp()
boros.load <- st_read("http://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=GeoJSON")
boros.load
boros.load$geometry
municipality
boros.cent <- boros.load %>%
st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
boros.cent
municipality$geography
municipality <- st_read("./Municipal_Boundary/Municipal_Boundary.shp")
municipality$geography
municipality
municipality$geometry
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[1],
latitude = sf::st_coordinates(.)[2])
municipality.cent
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2])
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[1,],
latitude = sf::st_coordinates(.)[2,])
municipality.cent <- municipality %>%
# st_centroid() %>%
mutate(longitude = sf::st_coordinates(municipality$geometry)[,1],
latitude = sf::st_coordinates(municipality$geometry)[,2])
municipality.cent <- municipality %>%
st_centroid() %>%
mutate(longitude = sf::st_coordinates(.)[,1],
latitude = sf::st_coordinates(.)[,2]) %>%
st_set_geometry(NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
geojson <- readLines("./Miami_Trolley_Routes.geojson")
geojson
geojson$Name
colnames(geojason)
colnames(geojson)
runApp()
